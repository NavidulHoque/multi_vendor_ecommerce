
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDED
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  passwordHash  String
  name          String
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addresses     Address[]
  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked    Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  parentId  Int?
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  description String
  price       Decimal       @db.Decimal(10,2)
  compareAt   Decimal?      @db.Decimal(10,2)
  sku         String?       @unique
  active      Boolean       @default(true)
  categoryId  Int
  category    Category      @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  inventory   Inventory?
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sort      Int     @default(0)
}

model Inventory {
  id        Int     @id @default(autoincrement())
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  stock     Int     @default(0)
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int     @default(1)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Address {
  id        Int     @id @default(autoincrement())
  userId    Int
  label     String
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String?
  postal    String
  country   String
  default   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id         Int          @id @default(autoincrement())
  userId     Int
  status     OrderStatus  @default(PENDING)
  subtotal   Decimal      @db.Decimal(10,2)
  shipping   Decimal      @db.Decimal(10,2)
  tax        Decimal      @db.Decimal(10,2)
  total      Decimal      @db.Decimal(10,2)
  placedAt   DateTime     @default(now())
  address    String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  title     String
  price     Decimal  @db.Decimal(10,2)
  quantity  Int      @default(1)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}
